// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(STUDENT)
  coins     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments   Enrollment[]
  testResults   TestResult[]
  notifications Notification[]
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments Enrollment[]
  tests       Test[]
}

model Enrollment {
  id          Int      @id @default(autoincrement())
  userId      Int
  courseId    Int
  progress    Float    @default(0)
  lastVisited DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Test {
  id        Int      @id @default(autoincrement())
  courseId  Int
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course      Course       @relation(fields: [courseId], references: [id])
  testResults TestResult[]
}

model TestResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  testId    Int
  passed    Boolean
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  test Test @relation(fields: [testId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
